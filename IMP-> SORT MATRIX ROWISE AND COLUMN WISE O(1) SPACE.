ort the matrix row-wise and column-wise

Given a n x n matrix. The problem is to sort the matrix row-wise and column wise.

Examples:

Input : mat[][] = { {4, 1, 3},
                    {9, 6, 8},
                    {5, 2, 7} }
Output : 1 3 4
         2 5 7
         6 8 9

Input : mat[][] = { {12, 7, 1, 8},
                    {20, 9, 11, 2},
                    {15, 4, 5, 13},
                    {3, 18, 10, 6} } 
Output : 1 5 8 12
         2 6 10 15
         3 7 11 18
         4 9 13 20
         
         
 WE CAN DIRECTLY SORT THE ROWS FIRST AND THEN COLUMNS. BUT COLUMNS CANNOT BE SORTED DIRECTLY. EACH COLUMNS FIRST NEEDS TO GO
 INTO THE SAME LIST AND THEN SORTED WHICH WILL TAKE ADDITIONAL SPACE.
 
 SO, FOR O(1) SPACE, WE CAN THINK OF A WAY SUCH THAT WE DON'T CREATE THIS EXTRA ARRAY. SO WE CAN THINK OF SOMEHOW CONVERTING
 THESE COLUMNS TO ROWS ONLY FIRST, THEN SORT IT AND THEN RESTORE THE MATRIX. THIS WOULD MEAN THAT WE WILL HAVE THE COLUMNS
 ALSO AS ROWS(SAME ARRAY, SO WE CAN DIRECTLY SORT THEM WITHOUT EXTRA SPACE). 
 
 LESSON-> WE CANNOT SAVE TIME BUT IF WE NEED TO DO AN OPERATION ON THE COLUMNS, THEN INSTEAD OF DIRECTLY STORING THE COLUMN
 VALUES IN AN ADDITIONAL ARRAY(TO MAKE THEM IN THE SAME ARRAY LIKE ROWS), WE CAN TAKE TRANSPONSE OF THE MATRIX. NOW WE CAN PERFORM
 THE SAME OPERATION ON COLUMNS JUST LIKE ROWS WITHOUT ANY ADDITIONAL SPACE. NOW WE CAN PERFORM ANY BUILTIN INPLACE ALGORITHM
 LIKE SORTING OR SOMETHING AND THEN TRANSPOSE THE MATRIX AGAIN TO GET THE ANS!
 
 SO DO:-
 Sort each row of the matrix.
Get transpose of the matrix.
Again sort each row of the matrix.
Again get transpose of the matrix.
