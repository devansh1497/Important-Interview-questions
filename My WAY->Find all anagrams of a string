
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".

class Solution:
    
    def check(self,d1,d2):
        for k,v in d1.items():
            if k not in d2 or d2[k] != v:
                return False
        return True
    
    def findAnagrams(self, s: str, p: str) -> List[int]:
        d1 = {}
        d2 = {}
        if len(s) == 0 or len(p) == 0 or len(p) > len(s):
            return []
        for i in p:
            if i not in d2:
                d2[i] = 0
            d2[i] += 1
    
        st = 0
        end = 0
        ans = []
        
        for i in s[:len(p)]:
            if i not in d1:
                d1[i] = 0
            d1[i] += 1
        
        if self.check(d1,d2):
            ans.append(0)
        end = len(p)
        while st <= end and end < len(s):
            print(st,end)

            d1[s[st]] -= 1
            if d1[s[st]] == 0:
                d1.pop(s[st])
            if s[end] not in d1:
                d1[s[end]] = 0
            d1[s[end]] += 1
            st+=1
            end+=1
            if len(d1) == len(d2) and self.check(d1,d2):
                ans.append(st)
                
        return ans
