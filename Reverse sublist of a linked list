
Reverse a linked list from position m to n. Do it in one-pass.

Note: 1 ≤ m ≤ n ≤ length of list.

Example:

Input: 1->2->3->4->5->NULL, m = 2, n = 4
Output: 1->4->3->2->5->NULL


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def reverseBetween(self, head: ListNode, m: int, n: int) -> ListNode:
        startPrev = None
        curr = head
        
        while m > 1:
            startPrev = curr
            curr = curr.next
            m-=1
            n-=1
        
        tail = curr
        prev = startPrev
        while n > 0:
            next = curr.next
            curr.next = prev
            prev = curr
            curr = next
            n -= 1
            
        if startPrev:
            startPrev.next = prev
        else:
            head = prev
            
        tail.next = curr
    
        return head
            
