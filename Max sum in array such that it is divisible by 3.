
Given an array nums of integers, we need to find the maximum possible sum of elements of the array such that it is divisible by three.

 FOLLOW UP -> EXTEND THE SOLUTION FOR DIVISIBILITY BY K(SOLUTION AT THE LAST).

Example 1:

Input: nums = [3,6,5,1,8]
Output: 18
Explanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3).
Example 2:

Input: nums = [4]
Output: 0
Explanation: Since 4 is not divisible by 3, do not pick any number.
Example 3:

Input: nums = [1,2,3,4,4]
Output: 12
Explanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).
 

Constraints:

1 <= nums.length <= 4 * 10^4
1 <= nums[i] <= 10^4



I originally couldn't understand the logic because many of the solutions combine handling the transitioning between states cleverly using math. I'll attempt to explain exactly whats happening and how we're going to track this state.

So the state here is dp[i][m]. dp[i][m] = largest sum from a subset of nums[:i] such that the sum % 3 equals m. After defining this we loop thru each number in nums. At each number we mod it by 3 and see what the result is.

For example, lets say the current number (nums[i]) we're looking at is 4. 4 % 3 = 1. So what does this mean? For each of the states we're tracking (dp[i][0], dp[i][1], dp[i][2]) how can we use this? If we add a number with remainder 1 to a sum with remainder 1 what do we get? We get a number with remainder 2. So we can use this info to construct the answer!

Example: If nums[i] % 3 == 1. We have remainder 1. How can we use this?:

For dp[i][0] we want a remainder of 0. How do we get this given we currently have a remainder of 1? We can add this number with remainder 1 to a sum with remainder 2. This creates an overall remainder of 0 as 2 + 1 = 3
For dp[i][1] we want a remainder of 1. This means we can add this number to dp[i-1][0]. This will give an overall remainder of 1 (num_with_remainder_0 + num_with_remainder_1) % 3 = 1.
For dp[i][2] we do the same thing. We can add the number to dp[i][1]. Why? If you've been following you can probably answer now.
We do this for each of the three cases:

if num % 3 == 0
if num % 3 == 1
if num % 3 == 2
And we're done.

def maxSumDivThree(self, nums: List[int]) -> int:
	n = len(nums)
	dp = [[0]*3 for _ in range(n+1)]
	dp[0][1] = float('-inf')
	dp[0][2] = float('-inf')
	for i in range(1, n+1):
		if nums[i-1] % 3 == 0: # Current remainder == 0
			dp[i][0] = max(dp[i-1][0], dp[i-1][0] + nums[i-1]) # Current remainder is 0, so we add to dp[i-1][0] to keep the remainder 0
			dp[i][1] = max(dp[i-1][1], dp[i-1][1] + nums[i-1]) # Current remainder is 0, so we add to dp[i-1][1] to keep the remainder 1
			dp[i][2] = max(dp[i-1][2], dp[i-1][2] + nums[i-1]) # Current remainder is 0, so we add to dp[i-1][2] to keep the remainder 2
		elif nums[i-1] % 3 == 1: # Current remainder == 1
			dp[i][0] = max(dp[i-1][0], dp[i-1][2] + nums[i-1]) # Current remainder is 1, so we add to dp[i-1][2] to keep the remainder 0
			dp[i][1] = max(dp[i-1][1], dp[i-1][0] + nums[i-1]) # Current remainder is 1, so we add to dp[i-1][0] to keep the remainder 1
			dp[i][2] = max(dp[i-1][2], dp[i-1][1] + nums[i-1]) # Current remainder is 1, so we add to dp[i-1][1] to keep the remainder 2
		else: # Current remainder == 2
			dp[i][0] = max(dp[i-1][0], dp[i-1][1] + nums[i-1]) # Can you tell how this works now?
			dp[i][1] = max(dp[i-1][1], dp[i-1][2] + nums[i-1])
			dp[i][2] = max(dp[i-1][2], dp[i-1][0] + nums[i-1])

	return dp[-1][0]

GENERALIZE TO K:-
def maxSumDivThree1(nums):
        n = len(nums)
        dp = [[0] * 3 for _ in range(n)]
        
        dp[0][nums[0]%3] = nums[0]
        
        for i in range(1,n):
            rem = nums[i] % 3
            if rem == 0:
                dp[i][0] = max(dp[i-1][0], dp[i-1][0] + nums[i])
                dp[i][1] = max(dp[i-1][1], dp[i-1][1] + nums[i])
                dp[i][2] = max(dp[i-1][2], dp[i-1][2] + nums[i])
            elif rem == 1:
                dp[i][0] = max(dp[i-1][0], dp[i-1][2] + nums[i])
                dp[i][1] = max(dp[i-1][1], dp[i-1][0] + nums[i])
                dp[i][2] = max(dp[i-1][2], dp[i-1][1] + nums[i])
            else:
                dp[i][0] = max(dp[i-1][0], dp[i-1][1] + nums[i])
                dp[i][1] = max(dp[i-1][1], dp[i-1][2] + nums[i])
                dp[i][2] = max(dp[i-1][2], dp[i-1][0] + nums[i])
        print(dp)   
