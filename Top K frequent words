
Given a non-empty list of words, return the k most frequent elements.

Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.

class Solution {
    
    static class Node{
        String word;
        int freq;
        
        Node(String word, int freq){
            this.word = word;
            this.freq = freq;
        }
    }
    
    public List<String> topKFrequent(String[] words, int k) {
        
        
        PriorityQueue<Node> pq = new PriorityQueue<>((a,b)->{
           if(a.freq == b.freq) return b.word.compareTo(a.word);
            return a.freq - b.freq;
        });
        
        Map<String,Integer> map = new HashMap<>();
        for(int i = 0 ; i < words.length ; i++){
            map.put(words[i],map.getOrDefault(words[i],0)+1);
        }
        
        for(Map.Entry<String,Integer> entry : map.entrySet()){
            pq.add(new Node(entry.getKey(), entry.getValue()));
            if(pq.size() > k) pq.poll();
        }
        
        List<String> ans = new ArrayList<>();
        while(!pq.isEmpty()) ans.add(pq.poll().word);
        
        //------------------------------IMPORTANT------------------------------
        
        Collections.reverse(ans);
        return ans;
    }
}
