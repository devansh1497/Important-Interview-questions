### Longest substring without duplicate characters

class Solution {
    public int lengthOfLongestSubstring(String s) {
        Set<Character> set = new HashSet<>();
        int l = 0;
        int n = s.length();
        if(n == 0) return 0;
        int r = 0;
        int ans = 0;
        while(l < n && r < n){
            if(!set.contains(s.charAt(r))){
                set.add(s.charAt(r));
                ans = Math.max(ans,r-l+1);
                r++;
            }
            else set.remove(s.charAt(l++));
        }
        return ans;
    }
}

### Longest substring without duplicates (NO SET OR HASHMAP)

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int arr[] = new int[26];
        Arrays.fill(arr,-1);
        if(s.length() == 0) return 0;
        int start = 0;
        arr[s.charAt(0)-'a'] = 0;
        int ans = 1;
        int n = s.length();
        for(int end = 1 ; end < n ; end++){
            int curr = s.charAt(end) - 'a';
            if(arr[curr] == -1){
                // System.out.println("here");
                ans = Math.max(end - start + 1, ans);
                arr[curr] = end;
            }
            else{
                // System.out.println("saw "+curr+" at index "+ end+" jumping to " +arr[curr]+1);
                start = arr[curr]+1;
                arr[curr] = end;
            }
        }
        return ans;
    }
}

###Longest substring with K distinct characters

#code
t = int(input())

for _ in range(t):
    s = input()
    k = int(input())
    
    d= {}
    
    start = 0
    end = 0
    
    ans = -1
    
    while start <= end and end < len(s):
        curr = s[end]
        if curr in d:
            d[curr]+=1
            end+=1
        else:
            if len(d) < k:
                d[curr] = 1
                end+=1
            elif len(d) == k:
                d[s[start]]-=1
                if d[s[start]] == 0:
                    d.pop(s[start])
                start+=1
        if len(d) == k:
            ans = max(ans,end-start)
    print(ans)
                
            

### Longest substring with atmost K DISTINCT characters

class Solution {
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        int l = 0;
        int r = 0;
        int n = s.length();
        int ans = 0;
        if(k == 0) return 0;
        Map<Character, Integer> map = new HashMap<>();
        while(l < n && r < n){
        //If the current right character exists, then we can simply add it to the answer as it will not increase the number of 
        distinct characters
            if(map.containsKey(s.charAt(r))){
                map.put(s.charAt(r), map.get(s.charAt(r))+1);
                ans = Math.max(r-l+1,ans);
                r++;
            }
            else{
            //If the current right character already exists, then check if the size of the map is >k or <k. If it is < k, then
            directly add it to the ans.
                if(map.size() < k){
                    map.put(s.charAt(r), 1);
                    ans = Math.max(r-l+1,ans);
                    r++;
                }
                //else if the size of map is already k, then start removing from the left till one of the characters is completely
                deleted.
                else{
                    map.put(s.charAt(l), map.get(s.charAt(l))-1);
                    if(map.get(s.charAt(l)) == 0) map.remove(s.charAt(l));
                    l++;
                }
            }
        }
        return ans;
    }
}

### Substring with atmost 2 distinct characters

class Solution {
    public int lengthOfLongestSubstringTwoDistinct(String s) {
        if(s.length() == 0) return 0;
        HashMap<Character, Integer> map = new HashMap<>();
        int n = s.length();
        int l = 0;
        int r = 0;
        int ans = 0;
        while(l < n && r < n){
            if(map.containsKey(s.charAt(r))){
                ans = Math.max(ans,r-l+1);
                map.put(s.charAt(r),map.get(s.charAt(r))+1);
                r++;
            }
            else{
                if(map.size() < 2){
                    map.put(s.charAt(r), 1);
                    ans = Math.max(r-l+1,ans);
                    r++;
                }
                else{
                    map.put(s.charAt(l), map.get(s.charAt(l))-1);
                    if(map.get(s.charAt(l)) == 0) map.remove(s.charAt(l));
                    l++;
                }
            }
        }
        return ans;
    }
}
