Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]


class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        d = {}
        ans = []
        path=[-1] * len(nums)
        for i in nums:
            if i not in d:
                d[i] = 0
            d[i] += 1
        
        def helper(path,nums,depth):
            if depth == len(nums):
                ans.append(copy.deepcopy(path))
                return
            for k,v in d.items():
                if v == 0:
                    continue
                path[depth] = k
                d[k]-=1
                helper(path,nums,depth+1)
                d[k]+=1
        
        helper(path,nums,0)
        return ans
