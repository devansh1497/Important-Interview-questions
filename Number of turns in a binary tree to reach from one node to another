
Given a binary tree and two nodes. The task is to count the number of turns needs to reach from one node to another node of the Binary tree.


import java.util.*;

public class Solution {

	static int count = 0;

	static class Node {
		int data;
		Node left;
		Node right;

		Node(int data) {
			this.data = data;
			this.left = null;
			this.right = null;
		}
	}

	static Node findLCA(Node root, int n1, int n2) {
		if (root == null)
			return null;

		if (root.data == n1 || root.data == n2)
			return root;

		Node left = findLCA(root.left, n1, n2);
		Node right = findLCA(root.right, n1, n2);

		if (left != null && right != null)
			return root;

		return left != null ? left : root;
	}

	public static boolean isElementPresentAndFindTurns(Node root, int n, char dir) {
		if (root == null)
			return false;

		if (root.data == n)
			return true;

		if (dir == 'l') {
			if (isElementPresentAndFindTurns(root.left, n, 'l'))
				return true;
			if (isElementPresentAndFindTurns(root.right, n, 'r')) {
				count++;
				return true;
			}
		}

		else {
			if (isElementPresentAndFindTurns(root.right, n, 'r'))
				return true;
			if (isElementPresentAndFindTurns(root.left, n, 'l')) {
				count++;
				return true;
			}
		}
		return false;
	}

	static int numberOfTurns(Node root, int first, int second) {

		Node lca = findLCA(root, first, second);
		count = 0;

		if (lca.data != first && lca.data != second) {
			if (!isElementPresentAndFindTurns(lca.left, first, 'l'))
				isElementPresentAndFindTurns(root.right, first, 'r');
			if (!isElementPresentAndFindTurns(lca.left, second, 'l'))
				isElementPresentAndFindTurns(root.right, second, 'r');
			return count + 1;
		}

		else if (lca.data == first) {
			if (!isElementPresentAndFindTurns(lca.left, second, 'l'))
				isElementPresentAndFindTurns(root.right, second, 'r');
		} else {
			if (!isElementPresentAndFindTurns(lca.left, first, 'l'))
				isElementPresentAndFindTurns(root.right, first, 'r');
		}

		return count;
	}

	public static void main(String args[]) {
		Node root = new Node(1);
		root.left = new Node(2);
		root.right = new Node(3);
		root.left.left = new Node(4);
		root.left.right = new Node(5);
		root.right.left = new Node(6);
		root.right.right = new Node(7);
		root.left.left.left = new Node(8);
		root.right.left.left = new Node(9);
		root.right.left.right = new Node(10);
		System.out.println(numberOfTurns(root, 5, 10));
	}

}
