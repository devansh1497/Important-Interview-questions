Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1.

Example 1:

Input: [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.
Example 2:

Input: [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.

class Solution {
    public int findMaxLength(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        int count = 0;
        int ans = 0;
        for(int i = 0 ; i < nums.length ; i++){
            
            if(nums[i] == 0) count--;
            else count++;
            //if count == 0, then there exists a subarray nums[0:i+1] where |0| == |1|.
            if(count == 0) ans = Math.max(ans,i+1);
            //else if we see a count that we have already seen then maximum length with be found by:-
            else if(map.containsKey(count)) ans = Math.max(ans, i-map.get(count));
            else map.put(count,i);
        }
        return ans;
    }
}

// 0 1 0 1 1 0 0 

// 0->-1
// -1->0
// -1 0 -1 
