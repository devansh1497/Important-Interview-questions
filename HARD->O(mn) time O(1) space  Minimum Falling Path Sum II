Given a square grid of integers arr, a falling path with non-zero shifts is a choice of exactly one element from each row of arr, such that no two elements chosen in adjacent rows are in the same column.

Return the minimum sum of a falling path with non-zero shifts.

 

Example 1:

Input: arr = [[1,2,3],[4,5,6],[7,8,9]]
Output: 13
Explanation: 
The possible falling paths are:
[1,5,9], [1,5,7], [1,6,7], [1,6,8],
[2,4,8], [2,4,9], [2,6,7], [2,6,8],
[3,4,8], [3,4,9], [3,5,7], [3,5,9]
The falling path with the smallest sum is [1,5,7], so the answer is 13.

COMING UP WITH O(MN^2) TIME AND O(MN) SPACE IS EASY. TRY TO COME UP WITH O(MN) TIME & O(1) SPACE.

Think about the most straightforward solution: find the minimum element in the first row, add it to the minimum element in the second row, and so on.

That should work, unless two minimum elements are in the same column. To account for that, let's remember the position pos of the minimum element fm. Also, we need to remember the second minimum element sm.

For the next row, we will use fm for columns different than pos, and sm otherwise.

int minFallingPathSum(vector<vector<int>>& arr) {
    int fm = 0, sm = 0, pos = -1;
    for (auto i = 0; i < arr.size(); ++i) {
        auto fm2 = INT_MAX, sm2 = INT_MAX, pos2 = -1;
        for (auto j = 0; j < arr[i].size(); ++j) {
            auto mn = j != pos ? fm : sm;
            if (arr[i][j] + mn < fm2) {
                sm2 = fm2;
                fm2 = arr[i][j] + mn;
                pos2 = j;
            } else sm2 = min(sm2, arr[i][j] + mn);
        }
        fm = fm2, sm = sm2, pos = pos2;
    }
    return fm;
}
