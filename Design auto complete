Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character '#'). For each character they type except '#', you need to return the top 3 historical hot sentences that have prefix the same as the part of sentence already typed. Here are the specific rules:

The hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before.
The returned top 3 hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same degree of hot, you need to use ASCII-code order (smaller one appears first).
If less than 3 hot sentences exist, then just return as many as you can.
When the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.
Your job is to implement the following functions:

The constructor function:

AutocompleteSystem(String[] sentences, int[] times): This is the constructor. The input is historical data. Sentences is a string array consists of previously typed sentences. Times is the corresponding times a sentence has been typed. Your system should record these historical data.

Now, the user wants to input a new sentence. The following function will provide the next character the user types:

List<String> input(char c): The input c is the next character typed by the user. The character will only be lower-case letters ('a' to 'z'), blank space (' ') or a special character ('#'). Also, the previously typed sentence should be recorded in your system. The output will be the top 3 historical hot sentences that have prefix the same as the part of sentence already typed.


 
Example:
Operation: AutocompleteSystem(["i love you", "island","ironman", "i love leetcode"], [5,3,2,2])
The system have already tracked down the following sentences and their corresponding times:
"i love you" : 5 times
"island" : 3 times
"ironman" : 2 times
"i love leetcode" : 2 times
Now, the user begins another search:

Operation: input('i')
Output: ["i love you", "island","i love leetcode"]
Explanation:
There are four sentences that have prefix "i". Among them, "ironman" and "i love leetcode" have same hot degree. Since ' ' has ASCII code 32 and 'r' has ASCII code 114, "i love leetcode" should be in front of "ironman". Also we only need to output top 3 hot sentences, so "ironman" will be ignored.

Operation: input(' ')
Output: ["i love you","i love leetcode"]
Explanation:
There are only two sentences that have prefix "i ".

Operation: input('a')
Output: []
Explanation:
There are no sentences that have prefix "i a".

Operation: input('#')
Output: []
Explanation:
The user finished the input, the sentence "i a" should be saved as a historical sentence in system. And the following input will be counted as a new search.

 



class AutocompleteSystem {
  TrieNode history;
  TrieNode cur;
  StringBuilder sb;

public AutocompleteSystem(String[] sentences, int[] times) {
    history = buildHistory(sentences, times);
    cur = history;
    sb = new StringBuilder();
}

public List<String> input(char c) {
    List<String> res = new LinkedList<>();
    TreeMap map = new TreeMap<Integer, PriorityQueue<String>>();
    if (c!='#') {
        int idx;
        if (c == ' ')
            idx = 26;
        else
            idx = c-'a';
        if (cur.next[idx]==null)
            cur.next[idx]=new TrieNode();
        cur = cur.next[idx];
        sb.append(c);
        getTopSentences(cur, map);
        getTop3Sentences(map, res);
    } else {
        cur.sentence = sb.toString();
        cur.count++;
        cur = history;
        sb.setLength(0);
    }
    
    return res;
}

private void getTop3Sentences(TreeMap<Integer, PriorityQueue<String>> map, List<String> res) {
    int count = 0;
    while (count<3 && map.size()>0) {
        PriorityQueue<String> queue = map.pollLastEntry().getValue();
        while(count<3 && queue.size()>0) {
            res.add(queue.poll());
            count++;
        }
    }
}

private void getTopSentences(TrieNode root, TreeMap<Integer, PriorityQueue<String>> res) {
    if (root.sentence != null) {
        if (!res.containsKey(root.count)) {
            res.put(root.count, new PriorityQueue<>());
        }
        res.get(root.count).add(root.sentence);
    }
    
    for(TrieNode node : root.next) {
        if (node!=null)
            getTopSentences(node, res);
    }
}

private TrieNode buildHistory(String[] sentences, int[] times) {
    TrieNode root = new TrieNode();
    for (int i=0; i<sentences.length; i++) {
        TrieNode cur = root;
        for (int j=0; j<sentences[i].length(); j++) {
            int idx;
            if (sentences[i].charAt(j) == ' ')
                idx = 26;
            else
                idx = sentences[i].charAt(j)-'a';
            if (cur.next[idx]==null)
                cur.next[idx]=new TrieNode();
            cur=cur.next[idx];
        }
        cur.count = times[i];
        cur.sentence = sentences[i];
    }
    
    return root;
}

class TrieNode{
    TrieNode[] next = new TrieNode[27];
    int count = 0;
    String sentence = null;
}
}
