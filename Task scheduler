Given a char array representing tasks CPU need to do. It contains capital letters A to Z where different letters represent different tasks. Tasks could be done without original order. Each task could be done in one interval. For each interval, CPU could finish one task or just be idle.

However, there is a non-negative cooling interval n that means between two same tasks, there must be at least n intervals that CPU are doing different tasks or just be idle.

You need to return the least number of intervals the CPU will take to finish all the given tasks.

 

Example:

Input: tasks = ["A","A","A","B","B","B"], n = 2
Output: 8
Explanation: A -> B -> idle -> A -> B -> idle -> A -> B


from collections import Counter
class Solution:
    def leastInterval(self, tasks: List[str], n: int) -> int:
        d = Counter(tasks)
        
        mx = 0
        
        for i in d:
            if d[i] > mx:
                mx = d[i]
        
        pq = []
        for i in d:
            heapq.heappush(pq,-d[i])
        
        ans = 0
        
        while pq:
            l = []
            #K will ensure that we put N different tasks before repeating/coming back to the same element
            k = n+1
            while k > 0 and pq:
                curr = heapq.heappop(pq)
                ans+=1
                k -= 1
                l.append(curr+1)
            
            for i in l:
                if i < 0:
                    heapq.heappush(pq,i)
            #if we have scheduled our last tasks and still k was not 0(i.e we still didn't schedule n different tasks), then we
            #still need to break out early as after scheduling the last tasks, we don't care for idles at the end since we are
            #already done with all out tasks...Not breaking early can result in a pattern like A->B-A->idle...and we shouldn't
            count/put idles at the end after completing all the tasks.
            if not pq:
                break
            ans += k
            
        return ans
            
