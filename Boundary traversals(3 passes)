/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    boolean isLeaf(TreeNode root){
        if(root.left == null && root.right == null) return true;
        return false;
    }
    
    void addLeaves(TreeNode root, List<Integer> res){
        if(root == null) return;
        if(isLeaf(root)) res.add(root.val);
        addLeaves(root.left,res);
        addLeaves(root.right,res);
    }
    public List<Integer> boundaryOfBinaryTree(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        if(root == null) return res;
        if(!isLeaf(root)){
            res.add(root.val);
        }
        TreeNode t = root.left;
        while(t!= null){
            if(!isLeaf(t)) res.add(t.val);
            if(t.left != null) t = t.left;
            else t = t.right;
        }
        addLeaves(root,res);
        t = root.right;
        Stack<TreeNode> st = new Stack<>();
        while(t!= null){
            if(!isLeaf(t)) st.add(t);
            if(t.right!=null)t = t.right;
            else t = t.left;
        }
        while(!st.isEmpty()) res.add(st.pop().val);
        return res;
    }
}
